# ==========================
# Built-in & Django Imports
# ==========================
import string
import secrets
from datetime import date
from django.db.models import Sum


# ==========================
# Coupon Code Utility
# ==========================
def generate_coupon_code(length: int = 10) -> str:
    """
    Generate a unique alphanumeric coupon code.
    Ensures uniqueness by checking against the Coupon model.

    Args:
        length (int): Length of the generated coupon code. Default is 10.

    Returns:
        str: A unique coupon code.
    """
    from .models import Coupon  # Lazy import to prevent circular import

    alphabet = string.ascii_uppercase + string.digits

    while True:
        code = "".join(secrets.choice(alphabet) for _ in range(length))
        if not Coupon.objects.filter(code=code).exists():
            return code


# ==========================
# Order ID Utility
# ==========================
def generate_unique_order_id(length: int = 8) -> str:
    """
    Generate a unique short alphanumeric order ID.
    Ensures uniqueness by checking existing Order IDs in the database.

    Args:
        length (int): Length of the generated order ID. Default is 8.

    Returns:
        str: A unique order ID.
    """
    from .models import Order  # Lazy import to prevent circular import

    characters = string.ascii_uppercase + string.digits  # e.g., "ABCD1234"

    while True:
        order_id = "".join(secrets.choice(characters) for _ in range(length))
        if not Order.objects.filter(custom_order_id=order_id).exists():
            return order_id


# ==========================
# Sales Utility
# ==========================
def get_daily_sales_total(target_date: date) -> float:
    """
    Calculate the total revenue generated by the restaurant for a specific date.

    Args:
        target_date (date): The date for which total sales should be calculated.

    Returns:
        float: The total sales amount for that date. Returns 0 if no orders exist.
    """
    from .models import Order  # Lazy import to prevent circular import

    if not isinstance(target_date, date):
        raise ValueError("The 'target_date' must be a datetime.date instance.")

    result = (
        Order.objects.filter(created_at__date=target_date)
        .aggregate(total_sum=Sum("total_price"))
        .get("total_sum")
    )

    return float(result or 0)
